1. Create a `mealSchema` that will be compiled into a `Meal` Model with the following properties:
    
    [The new mealSchema](https://www.notion.so/15c94ac08f044ad9b6be40cdb8408178)
    
2. In the `Flight` Model, add a reference to the Meal.
    
    [Additions to the Flight Model](https://www.notion.so/0f8bb2c4a35149589bba6143234d9931)
    
3. Add a link in the navbar for ‘Add Meal.’ Identify and code the route, then write the controller function to display a `meals/new.ejs` view containing a form for entering new meals.

4. Identify the route path/verb for the form. Code the route, then the controller function for creating a new meal. The list of meals should be displayed below the form to prevent the user from entering duplicates. (You’ll need to refactor the controller function from the previous step to include a query for ALL meals to show them on the page!)

5. Update the `show` view to display a `<select>` element with an `<option>` for each meal. The user should click a button adjacent to the `<select>` to add the selected meal to the list for that flight.

6. Update the `show` view to list all current meals that have been added for the flight. (You’ll need to update the controller function as well. `populate` to the rescue!!!)

## Hints

To show a list of m*eals* that belong to a *flight*, you’re going to have to make a separate query (inside of the callback of the `Flight.findById` call) to retrieve the flights.

Be sure to pass both `flight` & `meals` to the flight’s `show` view so that they can be rendered.

## More Hints

- Learn it, know it, live it… When adding functionality to the app:
    - Identify the “proper” Route (Verb + Path)
    - Create the UI that issues a request that matches that route.
    - Define the route on the server and map it to a controller action.
    - Code and export the controller action.
    - `res.render` a view in the case of a GET request, or `res.redirect` if data was changed.